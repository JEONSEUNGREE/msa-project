buildscript {
    ext {
        springBootVersion = '2.7.7'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

configurations {
    asciidoctorExt
}

group = 'com.example'
version = '1.0'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.5")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.0.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:2.7.7'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas:2.7.7'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.7.7'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.16.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-circuitbreaker-resilience4j:2.1.5'

    /* MSA 로그 */
    implementation 'org.springframework.cloud:spring-cloud-sleuth-dependencies:3.0.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.3.RELEASE'

    /* hystrix, turbine 대체 prometheus - metrics 수집, 모니터링및 알람을 위한 어플리케이션 */
    /* TSDB Time Series Database 사용 (시간단위로 저장) /[micro-service-name]/actuator/prometheus */
    /* Grafana는 위 프로메테우스가 수집한 정보를 도식화, 모니터링, 분석함 */
    implementation 'io.micrometer:micrometer-registry-prometheus:1.10.3'

    implementation project(':common-source')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

tasks.named('test') {
    useJUnitPlatform()
}

// 아래를 보면 bootJar는 asciidoctor task이후에 수행되며 수행 후 copyDocument task를 수행 합니다.
bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
    finalizedBy 'copyDocument'
}

task copyDocument(type: Copy) {
    dependsOn bootJar
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}
